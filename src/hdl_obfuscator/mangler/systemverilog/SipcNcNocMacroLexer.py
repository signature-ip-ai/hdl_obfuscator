# Generated from /scratch/users/jramos/hdl_obf/hdl_obfuscator/grammar/SipcNcNocMacroLexer.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,4,159,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,3,0,66,8,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        5,1,78,8,1,10,1,12,1,81,9,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        5,1,92,8,1,10,1,12,1,95,9,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,103,8,1,
        10,1,12,1,106,9,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,
        1,119,8,1,10,1,12,1,122,9,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,131,
        8,1,10,1,12,1,134,9,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,142,8,1,10,1,12,
        1,145,9,1,3,1,147,8,1,1,2,1,2,5,2,151,8,2,10,2,12,2,154,9,2,1,3,
        1,3,1,3,1,3,0,0,4,1,1,3,2,5,3,7,4,1,0,3,4,0,69,69,73,73,101,101,
        105,105,5,0,36,36,48,57,65,90,95,95,97,122,3,0,65,90,95,95,97,122,
        181,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,1,65,1,0,0,0,
        3,146,1,0,0,0,5,148,1,0,0,0,7,155,1,0,0,0,9,10,5,67,0,0,10,66,5,
        76,0,0,11,12,5,67,0,0,12,13,5,76,0,0,13,14,5,95,0,0,14,15,5,78,0,
        0,15,16,5,85,0,0,16,66,5,77,0,0,17,18,5,69,0,0,18,19,5,95,0,0,19,
        20,5,78,0,0,20,21,5,85,0,0,21,66,5,77,0,0,22,23,5,73,0,0,23,24,5,
        95,0,0,24,25,5,78,0,0,25,26,5,85,0,0,26,66,5,77,0,0,27,28,5,78,0,
        0,28,29,5,65,0,0,29,30,5,77,0,0,30,66,5,69,0,0,31,32,5,112,0,0,32,
        33,5,114,0,0,33,34,5,111,0,0,34,35,5,116,0,0,35,36,5,111,0,0,36,
        37,5,99,0,0,37,38,5,111,0,0,38,39,5,108,0,0,39,40,5,95,0,0,40,41,
        5,105,0,0,41,66,5,102,0,0,42,66,7,0,0,0,43,44,5,105,0,0,44,45,5,
        102,0,0,45,46,5,100,0,0,46,47,5,101,0,0,47,66,5,102,0,0,48,49,5,
        105,0,0,49,50,5,102,0,0,50,51,5,110,0,0,51,52,5,100,0,0,52,53,5,
        101,0,0,53,66,5,102,0,0,54,55,5,101,0,0,55,56,5,108,0,0,56,57,5,
        115,0,0,57,58,5,105,0,0,58,66,5,102,0,0,59,60,5,101,0,0,60,61,5,
        110,0,0,61,62,5,100,0,0,62,63,5,105,0,0,63,66,5,102,0,0,64,66,3,
        3,1,0,65,9,1,0,0,0,65,11,1,0,0,0,65,17,1,0,0,0,65,22,1,0,0,0,65,
        27,1,0,0,0,65,31,1,0,0,0,65,42,1,0,0,0,65,43,1,0,0,0,65,48,1,0,0,
        0,65,54,1,0,0,0,65,59,1,0,0,0,65,64,1,0,0,0,66,2,1,0,0,0,67,68,5,
        67,0,0,68,69,5,79,0,0,69,70,5,78,0,0,70,71,5,78,0,0,71,72,5,69,0,
        0,72,73,5,67,0,0,73,74,5,84,0,0,74,75,5,95,0,0,75,79,1,0,0,0,76,
        78,7,1,0,0,77,76,1,0,0,0,78,81,1,0,0,0,79,77,1,0,0,0,79,80,1,0,0,
        0,80,147,1,0,0,0,81,79,1,0,0,0,82,83,5,68,0,0,83,84,5,69,0,0,84,
        85,5,70,0,0,85,86,5,73,0,0,86,87,5,78,0,0,87,88,5,69,0,0,88,89,5,
        95,0,0,89,93,1,0,0,0,90,92,7,1,0,0,91,90,1,0,0,0,92,95,1,0,0,0,93,
        91,1,0,0,0,93,94,1,0,0,0,94,147,1,0,0,0,95,93,1,0,0,0,96,97,5,71,
        0,0,97,98,5,69,0,0,98,99,5,78,0,0,99,100,5,95,0,0,100,104,1,0,0,
        0,101,103,7,1,0,0,102,101,1,0,0,0,103,106,1,0,0,0,104,102,1,0,0,
        0,104,105,1,0,0,0,105,147,1,0,0,0,106,104,1,0,0,0,107,108,5,71,0,
        0,108,109,5,69,0,0,109,110,5,78,0,0,110,111,5,69,0,0,111,112,5,82,
        0,0,112,113,5,65,0,0,113,114,5,84,0,0,114,115,5,69,0,0,115,116,5,
        95,0,0,116,120,1,0,0,0,117,119,7,1,0,0,118,117,1,0,0,0,119,122,1,
        0,0,0,120,118,1,0,0,0,120,121,1,0,0,0,121,147,1,0,0,0,122,120,1,
        0,0,0,123,124,5,73,0,0,124,125,5,78,0,0,125,126,5,83,0,0,126,127,
        5,84,0,0,127,128,5,95,0,0,128,132,1,0,0,0,129,131,7,1,0,0,130,129,
        1,0,0,0,131,134,1,0,0,0,132,130,1,0,0,0,132,133,1,0,0,0,133,147,
        1,0,0,0,134,132,1,0,0,0,135,136,5,83,0,0,136,137,5,69,0,0,137,138,
        5,84,0,0,138,139,5,95,0,0,139,143,1,0,0,0,140,142,7,1,0,0,141,140,
        1,0,0,0,142,145,1,0,0,0,143,141,1,0,0,0,143,144,1,0,0,0,144,147,
        1,0,0,0,145,143,1,0,0,0,146,67,1,0,0,0,146,82,1,0,0,0,146,96,1,0,
        0,0,146,107,1,0,0,0,146,123,1,0,0,0,146,135,1,0,0,0,147,4,1,0,0,
        0,148,152,7,2,0,0,149,151,7,1,0,0,150,149,1,0,0,0,151,154,1,0,0,
        0,152,150,1,0,0,0,152,153,1,0,0,0,153,6,1,0,0,0,154,152,1,0,0,0,
        155,156,9,0,0,0,156,157,1,0,0,0,157,158,6,3,0,0,158,8,1,0,0,0,10,
        0,65,79,93,104,120,132,143,146,152,1,6,0,0
    ]

class SipcNcNocMacroLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    PROTECTED_MACRO = 1
    MACRO_TITLE = 2
    NON_PROTECTED_MACRO = 3
    ANY_OTHER = 4

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
 ]

    symbolicNames = [ "<INVALID>",
            "PROTECTED_MACRO", "MACRO_TITLE", "NON_PROTECTED_MACRO", "ANY_OTHER" ]

    ruleNames = [ "PROTECTED_MACRO", "MACRO_TITLE", "NON_PROTECTED_MACRO", 
                  "ANY_OTHER" ]

    grammarFileName = "SipcNcNocMacroLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


