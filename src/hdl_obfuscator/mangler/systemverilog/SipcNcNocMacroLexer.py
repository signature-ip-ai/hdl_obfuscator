# Generated from /scratch/users/jramos/hdl_obf/hdl_obfuscator/grammar/SipcNcNocMacroLexer.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,4,192,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,3,0,85,8,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,5,1,97,8,1,10,1,12,1,100,9,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,5,1,111,8,1,10,1,12,1,114,9,1,1,1,1,1,1,1,1,1,1,1,1,
        1,5,1,122,8,1,10,1,12,1,125,9,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,5,1,138,8,1,10,1,12,1,141,9,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,5,1,150,8,1,10,1,12,1,153,9,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,
        161,8,1,10,1,12,1,164,9,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,
        1,175,8,1,10,1,12,1,178,9,1,3,1,180,8,1,1,2,1,2,5,2,184,8,2,10,2,
        12,2,187,9,2,1,3,1,3,1,3,1,3,0,0,4,1,1,3,2,5,3,7,4,1,0,3,4,0,69,
        69,73,73,101,101,105,105,5,0,36,36,48,57,65,90,95,95,97,122,3,0,
        65,90,95,95,97,122,219,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,
        0,0,0,1,84,1,0,0,0,3,179,1,0,0,0,5,181,1,0,0,0,7,188,1,0,0,0,9,10,
        5,67,0,0,10,85,5,76,0,0,11,12,5,67,0,0,12,13,5,76,0,0,13,14,5,95,
        0,0,14,15,5,78,0,0,15,16,5,85,0,0,16,85,5,77,0,0,17,18,5,69,0,0,
        18,19,5,95,0,0,19,20,5,78,0,0,20,21,5,85,0,0,21,85,5,77,0,0,22,23,
        5,73,0,0,23,24,5,95,0,0,24,25,5,78,0,0,25,26,5,85,0,0,26,85,5,77,
        0,0,27,28,5,78,0,0,28,29,5,65,0,0,29,30,5,77,0,0,30,85,5,69,0,0,
        31,32,5,112,0,0,32,33,5,114,0,0,33,34,5,111,0,0,34,35,5,116,0,0,
        35,36,5,111,0,0,36,37,5,99,0,0,37,38,5,111,0,0,38,39,5,108,0,0,39,
        40,5,95,0,0,40,41,5,105,0,0,41,85,5,102,0,0,42,85,7,0,0,0,43,44,
        5,105,0,0,44,45,5,102,0,0,45,46,5,100,0,0,46,47,5,101,0,0,47,85,
        5,102,0,0,48,49,5,105,0,0,49,50,5,102,0,0,50,51,5,110,0,0,51,52,
        5,100,0,0,52,53,5,101,0,0,53,85,5,102,0,0,54,55,5,101,0,0,55,56,
        5,108,0,0,56,57,5,115,0,0,57,58,5,105,0,0,58,85,5,102,0,0,59,60,
        5,101,0,0,60,61,5,110,0,0,61,62,5,100,0,0,62,63,5,105,0,0,63,85,
        5,102,0,0,64,65,5,100,0,0,65,66,5,101,0,0,66,67,5,102,0,0,67,68,
        5,105,0,0,68,69,5,110,0,0,69,85,5,101,0,0,70,71,5,83,0,0,71,72,5,
        85,0,0,72,73,5,66,0,0,73,74,5,84,0,0,74,75,5,79,0,0,75,85,5,80,0,
        0,76,77,5,83,0,0,77,78,5,85,0,0,78,79,5,66,0,0,79,80,5,95,0,0,80,
        81,5,78,0,0,81,82,5,85,0,0,82,85,5,77,0,0,83,85,3,3,1,0,84,9,1,0,
        0,0,84,11,1,0,0,0,84,17,1,0,0,0,84,22,1,0,0,0,84,27,1,0,0,0,84,31,
        1,0,0,0,84,42,1,0,0,0,84,43,1,0,0,0,84,48,1,0,0,0,84,54,1,0,0,0,
        84,59,1,0,0,0,84,64,1,0,0,0,84,70,1,0,0,0,84,76,1,0,0,0,84,83,1,
        0,0,0,85,2,1,0,0,0,86,87,5,67,0,0,87,88,5,79,0,0,88,89,5,78,0,0,
        89,90,5,78,0,0,90,91,5,69,0,0,91,92,5,67,0,0,92,93,5,84,0,0,93,94,
        5,95,0,0,94,98,1,0,0,0,95,97,7,1,0,0,96,95,1,0,0,0,97,100,1,0,0,
        0,98,96,1,0,0,0,98,99,1,0,0,0,99,180,1,0,0,0,100,98,1,0,0,0,101,
        102,5,68,0,0,102,103,5,69,0,0,103,104,5,70,0,0,104,105,5,73,0,0,
        105,106,5,78,0,0,106,107,5,69,0,0,107,108,5,95,0,0,108,112,1,0,0,
        0,109,111,7,1,0,0,110,109,1,0,0,0,111,114,1,0,0,0,112,110,1,0,0,
        0,112,113,1,0,0,0,113,180,1,0,0,0,114,112,1,0,0,0,115,116,5,71,0,
        0,116,117,5,69,0,0,117,118,5,78,0,0,118,119,5,95,0,0,119,123,1,0,
        0,0,120,122,7,1,0,0,121,120,1,0,0,0,122,125,1,0,0,0,123,121,1,0,
        0,0,123,124,1,0,0,0,124,180,1,0,0,0,125,123,1,0,0,0,126,127,5,71,
        0,0,127,128,5,69,0,0,128,129,5,78,0,0,129,130,5,69,0,0,130,131,5,
        82,0,0,131,132,5,65,0,0,132,133,5,84,0,0,133,134,5,69,0,0,134,135,
        5,95,0,0,135,139,1,0,0,0,136,138,7,1,0,0,137,136,1,0,0,0,138,141,
        1,0,0,0,139,137,1,0,0,0,139,140,1,0,0,0,140,180,1,0,0,0,141,139,
        1,0,0,0,142,143,5,73,0,0,143,144,5,78,0,0,144,145,5,83,0,0,145,146,
        5,84,0,0,146,147,5,95,0,0,147,151,1,0,0,0,148,150,7,1,0,0,149,148,
        1,0,0,0,150,153,1,0,0,0,151,149,1,0,0,0,151,152,1,0,0,0,152,180,
        1,0,0,0,153,151,1,0,0,0,154,155,5,83,0,0,155,156,5,69,0,0,156,157,
        5,84,0,0,157,158,5,95,0,0,158,162,1,0,0,0,159,161,7,1,0,0,160,159,
        1,0,0,0,161,164,1,0,0,0,162,160,1,0,0,0,162,163,1,0,0,0,163,180,
        1,0,0,0,164,162,1,0,0,0,165,166,5,77,0,0,166,167,5,79,0,0,167,168,
        5,68,0,0,168,169,5,85,0,0,169,170,5,76,0,0,170,171,5,69,0,0,171,
        172,5,95,0,0,172,176,1,0,0,0,173,175,7,1,0,0,174,173,1,0,0,0,175,
        178,1,0,0,0,176,174,1,0,0,0,176,177,1,0,0,0,177,180,1,0,0,0,178,
        176,1,0,0,0,179,86,1,0,0,0,179,101,1,0,0,0,179,115,1,0,0,0,179,126,
        1,0,0,0,179,142,1,0,0,0,179,154,1,0,0,0,179,165,1,0,0,0,180,4,1,
        0,0,0,181,185,7,2,0,0,182,184,7,1,0,0,183,182,1,0,0,0,184,187,1,
        0,0,0,185,183,1,0,0,0,185,186,1,0,0,0,186,6,1,0,0,0,187,185,1,0,
        0,0,188,189,9,0,0,0,189,190,1,0,0,0,190,191,6,3,0,0,191,8,1,0,0,
        0,11,0,84,98,112,123,139,151,162,176,179,185,1,6,0,0
    ]

class SipcNcNocMacroLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    PROTECTED_MACRO = 1
    MACRO_TITLE = 2
    NON_PROTECTED_MACRO = 3
    ANY_OTHER = 4

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
 ]

    symbolicNames = [ "<INVALID>",
            "PROTECTED_MACRO", "MACRO_TITLE", "NON_PROTECTED_MACRO", "ANY_OTHER" ]

    ruleNames = [ "PROTECTED_MACRO", "MACRO_TITLE", "NON_PROTECTED_MACRO", 
                  "ANY_OTHER" ]

    grammarFileName = "SipcNcNocMacroLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


