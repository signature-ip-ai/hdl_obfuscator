# Generated from /scratch/users/jramos/hdl_obf/hdl_obfuscator/grammar/SipcNcNocMacroLexer.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,4,217,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,4,0,61,
        8,0,11,0,12,0,62,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
        1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
        1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
        1,0,3,0,110,8,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,122,
        8,1,10,1,12,1,125,9,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,136,
        8,1,10,1,12,1,139,9,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,147,8,1,10,1,12,
        1,150,9,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,163,8,
        1,10,1,12,1,166,9,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,175,8,1,10,1,
        12,1,178,9,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,186,8,1,10,1,12,1,189,9,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,200,8,1,10,1,12,1,203,
        9,1,3,1,205,8,1,1,2,1,2,5,2,209,8,2,10,2,12,2,212,9,2,1,3,1,3,1,
        3,1,3,0,0,4,1,1,3,2,5,3,7,4,1,0,3,5,0,36,36,48,57,65,90,95,95,97,
        122,4,0,69,69,73,73,101,101,105,105,3,0,65,90,95,95,97,122,250,0,
        1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,1,109,1,0,0,0,3,204,
        1,0,0,0,5,206,1,0,0,0,7,213,1,0,0,0,9,10,5,67,0,0,10,110,5,76,0,
        0,11,12,5,67,0,0,12,13,5,76,0,0,13,14,5,95,0,0,14,15,5,78,0,0,15,
        16,5,85,0,0,16,110,5,77,0,0,17,18,5,69,0,0,18,19,5,95,0,0,19,20,
        5,78,0,0,20,21,5,85,0,0,21,110,5,77,0,0,22,23,5,73,0,0,23,24,5,95,
        0,0,24,25,5,78,0,0,25,26,5,85,0,0,26,110,5,77,0,0,27,28,5,67,0,0,
        28,29,5,76,0,0,29,30,5,95,0,0,30,31,5,78,0,0,31,32,5,85,0,0,32,33,
        5,77,0,0,33,34,5,95,0,0,34,110,5,69,0,0,35,36,5,67,0,0,36,37,5,76,
        0,0,37,38,5,95,0,0,38,39,5,78,0,0,39,40,5,85,0,0,40,41,5,77,0,0,
        41,42,5,95,0,0,42,110,5,73,0,0,43,44,5,78,0,0,44,45,5,85,0,0,45,
        110,5,77,0,0,46,47,5,73,0,0,47,48,5,68,0,0,48,110,5,88,0,0,49,50,
        5,80,0,0,50,51,5,82,0,0,51,52,5,69,0,0,52,53,5,70,0,0,53,54,5,73,
        0,0,54,110,5,88,0,0,55,56,5,78,0,0,56,57,5,65,0,0,57,58,5,77,0,0,
        58,110,5,69,0,0,59,61,7,0,0,0,60,59,1,0,0,0,61,62,1,0,0,0,62,60,
        1,0,0,0,62,63,1,0,0,0,63,64,1,0,0,0,64,65,5,95,0,0,65,66,5,105,0,
        0,66,110,5,102,0,0,67,110,7,1,0,0,68,69,5,105,0,0,69,70,5,102,0,
        0,70,71,5,100,0,0,71,72,5,101,0,0,72,110,5,102,0,0,73,74,5,105,0,
        0,74,75,5,102,0,0,75,76,5,110,0,0,76,77,5,100,0,0,77,78,5,101,0,
        0,78,110,5,102,0,0,79,80,5,101,0,0,80,81,5,108,0,0,81,82,5,115,0,
        0,82,83,5,105,0,0,83,110,5,102,0,0,84,85,5,101,0,0,85,86,5,110,0,
        0,86,87,5,100,0,0,87,88,5,105,0,0,88,110,5,102,0,0,89,90,5,100,0,
        0,90,91,5,101,0,0,91,92,5,102,0,0,92,93,5,105,0,0,93,94,5,110,0,
        0,94,110,5,101,0,0,95,96,5,83,0,0,96,97,5,85,0,0,97,98,5,66,0,0,
        98,99,5,84,0,0,99,100,5,79,0,0,100,110,5,80,0,0,101,102,5,83,0,0,
        102,103,5,85,0,0,103,104,5,66,0,0,104,105,5,95,0,0,105,106,5,78,
        0,0,106,107,5,85,0,0,107,110,5,77,0,0,108,110,3,3,1,0,109,9,1,0,
        0,0,109,11,1,0,0,0,109,17,1,0,0,0,109,22,1,0,0,0,109,27,1,0,0,0,
        109,35,1,0,0,0,109,43,1,0,0,0,109,46,1,0,0,0,109,49,1,0,0,0,109,
        55,1,0,0,0,109,60,1,0,0,0,109,67,1,0,0,0,109,68,1,0,0,0,109,73,1,
        0,0,0,109,79,1,0,0,0,109,84,1,0,0,0,109,89,1,0,0,0,109,95,1,0,0,
        0,109,101,1,0,0,0,109,108,1,0,0,0,110,2,1,0,0,0,111,112,5,67,0,0,
        112,113,5,79,0,0,113,114,5,78,0,0,114,115,5,78,0,0,115,116,5,69,
        0,0,116,117,5,67,0,0,117,118,5,84,0,0,118,119,5,95,0,0,119,123,1,
        0,0,0,120,122,7,0,0,0,121,120,1,0,0,0,122,125,1,0,0,0,123,121,1,
        0,0,0,123,124,1,0,0,0,124,205,1,0,0,0,125,123,1,0,0,0,126,127,5,
        68,0,0,127,128,5,69,0,0,128,129,5,70,0,0,129,130,5,73,0,0,130,131,
        5,78,0,0,131,132,5,69,0,0,132,133,5,95,0,0,133,137,1,0,0,0,134,136,
        7,0,0,0,135,134,1,0,0,0,136,139,1,0,0,0,137,135,1,0,0,0,137,138,
        1,0,0,0,138,205,1,0,0,0,139,137,1,0,0,0,140,141,5,71,0,0,141,142,
        5,69,0,0,142,143,5,78,0,0,143,144,5,95,0,0,144,148,1,0,0,0,145,147,
        7,0,0,0,146,145,1,0,0,0,147,150,1,0,0,0,148,146,1,0,0,0,148,149,
        1,0,0,0,149,205,1,0,0,0,150,148,1,0,0,0,151,152,5,71,0,0,152,153,
        5,69,0,0,153,154,5,78,0,0,154,155,5,69,0,0,155,156,5,82,0,0,156,
        157,5,65,0,0,157,158,5,84,0,0,158,159,5,69,0,0,159,160,5,95,0,0,
        160,164,1,0,0,0,161,163,7,0,0,0,162,161,1,0,0,0,163,166,1,0,0,0,
        164,162,1,0,0,0,164,165,1,0,0,0,165,205,1,0,0,0,166,164,1,0,0,0,
        167,168,5,73,0,0,168,169,5,78,0,0,169,170,5,83,0,0,170,171,5,84,
        0,0,171,172,5,95,0,0,172,176,1,0,0,0,173,175,7,0,0,0,174,173,1,0,
        0,0,175,178,1,0,0,0,176,174,1,0,0,0,176,177,1,0,0,0,177,205,1,0,
        0,0,178,176,1,0,0,0,179,180,5,83,0,0,180,181,5,69,0,0,181,182,5,
        84,0,0,182,183,5,95,0,0,183,187,1,0,0,0,184,186,7,0,0,0,185,184,
        1,0,0,0,186,189,1,0,0,0,187,185,1,0,0,0,187,188,1,0,0,0,188,205,
        1,0,0,0,189,187,1,0,0,0,190,191,5,77,0,0,191,192,5,79,0,0,192,193,
        5,68,0,0,193,194,5,85,0,0,194,195,5,76,0,0,195,196,5,69,0,0,196,
        197,5,95,0,0,197,201,1,0,0,0,198,200,7,0,0,0,199,198,1,0,0,0,200,
        203,1,0,0,0,201,199,1,0,0,0,201,202,1,0,0,0,202,205,1,0,0,0,203,
        201,1,0,0,0,204,111,1,0,0,0,204,126,1,0,0,0,204,140,1,0,0,0,204,
        151,1,0,0,0,204,167,1,0,0,0,204,179,1,0,0,0,204,190,1,0,0,0,205,
        4,1,0,0,0,206,210,7,2,0,0,207,209,7,0,0,0,208,207,1,0,0,0,209,212,
        1,0,0,0,210,208,1,0,0,0,210,211,1,0,0,0,211,6,1,0,0,0,212,210,1,
        0,0,0,213,214,9,0,0,0,214,215,1,0,0,0,215,216,6,3,0,0,216,8,1,0,
        0,0,12,0,62,109,123,137,148,164,176,187,201,204,210,1,6,0,0
    ]

class SipcNcNocMacroLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    PROTECTED_MACRO = 1
    MACRO_TITLE = 2
    NON_PROTECTED_MACRO = 3
    ANY_OTHER = 4

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
 ]

    symbolicNames = [ "<INVALID>",
            "PROTECTED_MACRO", "MACRO_TITLE", "NON_PROTECTED_MACRO", "ANY_OTHER" ]

    ruleNames = [ "PROTECTED_MACRO", "MACRO_TITLE", "NON_PROTECTED_MACRO", 
                  "ANY_OTHER" ]

    grammarFileName = "SipcNcNocMacroLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


