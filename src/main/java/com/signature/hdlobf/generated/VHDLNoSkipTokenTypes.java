// $ANTLR 2.7.4: "VHDLLexer.g" -> "VhdlNoSkipLexer.java"$
package com.signature.hdlobf.generated;

public interface VHDLNoSkipTokenTypes {
	int EOF = 1;
	int NULL_TREE_LOOKAHEAD = 3;
	int ABS = 4;
	int ACCESS = 5;
	int ACROSS = 6;
	int AFTER = 7;
	int ALIAS = 8;
	int ALL = 9;
	int AND = 10;
	int ARCHITECTURE = 11;
	int ARRAY = 12;
	int ASSERT = 13;
	int ATTRIBUTE = 14;
	int BEGIN = 15;
	int BLOCK = 16;
	int BODY = 17;
	int BREAK = 18;
	int BUFFER = 19;
	int BUS = 20;
	int CASE = 21;
	int COMPONENT = 22;
	int CONFIGURATION = 23;
	int CONSTANT = 24;
	int DISCONNECT = 25;
	int DOWNTO = 26;
	int ELSE = 27;
	int ELSIF = 28;
	int END = 29;
	int ENTITY = 30;
	int EXIT = 31;
	int FILE = 32;
	int FOR = 33;
	int FUNCTION = 34;
	int GENERATE = 35;
	int GENERIC = 36;
	int GROUP = 37;
	int GUARDED = 38;
	int IF = 39;
	int IMPURE = 40;
	int IN = 41;
	int INERTIAL = 42;
	int INOUT = 43;
	int IS = 44;
	int LABEL = 45;
	int LIBRARY = 46;
	int LIMIT = 47;
	int LINKAGE = 48;
	int LITERAL = 49;
	int LOOP = 50;
	int MAP = 51;
	int MOD = 52;
	int NAND = 53;
	int NATURE = 54;
	int NEW = 55;
	int NEXT = 56;
	int NOISE = 57;
	int NOR = 58;
	int NOT = 59;
	int NULL = 60;
	int OF = 61;
	int ON = 62;
	int OPEN = 63;
	int OR = 64;
	int OTHERS = 65;
	int OUT = 66;
	int PACKAGE = 67;
	int PORT = 68;
	int POSTPONED = 69;
	int PROCEDURAL = 70;
	int PROCEDURE = 71;
	int PROCESS = 72;
	int PROTECTED = 73;
	int PURE = 74;
	int QUANTITY = 75;
	int RANGE = 76;
	int RECORD = 77;
	int REFERENCE = 78;
	int REGISTER = 79;
	int REJECT = 80;
	int REM = 81;
	int REPORT = 82;
	int RETURN = 83;
	int ROL = 84;
	int ROR = 85;
	int SELECT = 86;
	int SEVERITY = 87;
	int SHARED = 88;
	int SIGNAL = 89;
	int SLA = 90;
	int SLL = 91;
	int SPECTRUM = 92;
	int SRA = 93;
	int SRL = 94;
	int SUBNATURE = 95;
	int SUBTYPE = 96;
	int TERMINAL = 97;
	int THEN = 98;
	int THROUGH = 99;
	int TO = 100;
	int TOLERANCE = 101;
	int TRANSPORT = 102;
	int TYPE = 103;
	int UNAFFECTED = 104;
	int UNITS = 105;
	int UNTIL = 106;
	int USE = 107;
	int VARIABLE = 108;
	int WAIT = 109;
	int WHEN = 110;
	int WHILE = 111;
	int WITH = 112;
	int XNOR = 113;
	int XOR = 114;
	int L_PAREN = 115;
	int EQUAL_EQUAL = 116;
	int AMPERSAND = 117;
	int R_PAREN = 118;
	int L_BRACKET = 119;
	int R_BRACKET = 120;
	int COMMA = 121;
	int COLON_EQUAL = 122;
	int COLON = 123;
	int SEMI_COLON = 124;
	int LESS_GREATER = 125;
	int LESS_EQUAL = 126;
	int LESS = 127;
	int EQUAL_GREATER = 128;
	int EQUAL = 129;
	int GREATER_EQUAL = 130;
	int GREATER = 131;
	int CHOICE1 = 132;
	int NOT_EQUAL = 133;
	int DOT = 134;
	int EXPONENT = 135;
	int MULTIPLY = 136;
	int DIVIDE = 137;
	int PLUS = 138;
	int MINUS = 139;
	int UNDERSCORE = 140;
	int BIT_STRING_LITERAL = 141;
	int STRING_LITERAL = 142;
	int QUOTE = 143;
	int CHARACTER_LITERAL = 144;
	int CHARACTER_LITERAL_OR_QUOTE = 145;
	int WS = 146;
	int DIGIT = 147;
	int LETTER = 148;
	int SIMPLE_IDENTIFIER = 149;
	int BASED_INTEGER_LITERAL_OR_DECIMAL_INTEGER_LITERAL = 150;
	int DECIMAL_INTEGER_LITERAL = 151;
	int BASED_INTEGER_LITERAL = 152;
	int INTEGER = 153;
	int BASED_INTEGER = 154;
	int EXP = 155;
	int COMMENT = 156;
}
